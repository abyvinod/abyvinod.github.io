<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Notes on the margin - Abraham Vinod</title><link href="/" rel="alternate"></link><link href="/feeds/abraham-vinod.atom.xml" rel="self"></link><id>/</id><updated>2017-02-11T00:00:00-07:00</updated><entry><title>Git for research work</title><link href="/gitCheatSheet.html" rel="alternate"></link><published>2017-02-11T00:00:00-07:00</published><updated>2017-02-11T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-02-11:/gitCheatSheet.html</id><summary type="html">&lt;p&gt;List of useful features (and the corresponding commands in git)&lt;/p&gt;</summary><content type="html">&lt;p&gt;While diligently doing your research, have you ever felt&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oh, shoot! I changed the code in my home computer but forgot to email myself a copy so that I run it out in my lab. Help?!&lt;/li&gt;
&lt;li&gt;Oh, shoot! I edited away my code from a point where &lt;em&gt;something&lt;/em&gt; was working to a point where &lt;em&gt;nothing&lt;/em&gt; is working. Help?!&lt;/li&gt;
&lt;li&gt;Oh, shoot! I was editing a file on &lt;a href="http://www.overleaf.com"&gt;Overleaf&lt;/a&gt;, and something went wrong. Now, I want to go back, but I don't have a premium account. Help?!&lt;/li&gt;
&lt;li&gt;Oh, shoot! My friend added a new feature to a legacy code, and I added a couple of new features myself, but now we want to combine our forces! I don't want to manually merge the two codes by going over them line by line. Help?!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt; can solve all these problems for you!!!  The aim of this blog post is &lt;strong&gt;not&lt;/strong&gt; to describe how to use git. While I dedicate first three sections on describing the what and how of git, I will leave it to you learn more about git. One of the best online tutorial posts on git which is easy on the eyes is &lt;a href="http://rogerdudler.github.io/git-guide/"&gt;http://rogerdudler.github.io/git-guide/&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-is-git"&gt;What is Git?&lt;/h1&gt;
&lt;p&gt;Quoting from &lt;a href="https://en.wikipedia.org/wiki/Git"&gt;Wikipedia&lt;/a&gt;, git is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for software development, but it can be used to keep track of changes in any files. As a distributed revision control system it is aimed at speed, data integrity, and support for distributed, non-linear workflows.&lt;/p&gt;
&lt;h2 id="how-do-i-use-it"&gt;How do I use it?&lt;/h2&gt;
&lt;p&gt;I will describe how to use it if you are using Windows&lt;sup id="fnref-UnixGit"&gt;&lt;a class="footnote-ref" href="#fn-UnixGit"&gt;1&lt;/a&gt;&lt;/sup&gt;. You can grab a copy of Git (bash terminal and the software) from &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also need an account on &lt;a href="http://www.github.com"&gt;http://www.github.com&lt;/a&gt; or &lt;a href="http://www.bitbucket.org"&gt;http://www.bitbucket.org&lt;/a&gt;. These services allow you to configure a remote git repository that serves as a common meeting place for your code distributed across multiple computers.  I prefer &lt;a href="http://www.bitbucket.org/abyvinod"&gt;BitBucket&lt;/a&gt; since they give unlimited private repositories (you don't want your research code out in public, do you?). &lt;a href="http://www.github.com/abyvinod"&gt;Github&lt;/a&gt;, on the other hand, provides unlimited public repositories and require a subscription to avail private repositories. Note however that industry prefers Github because it has traditionally been used for open-source software. This blog has been hosted using &lt;a href="https://pages.github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="incorporating-git-into-your-workflow"&gt;Incorporating git into your workflow&lt;/h2&gt;
&lt;p&gt;Learning git isn't very hard. There are just a few commands to do some useful tasks, and once you get the hang of it, it will look intuitive. Here are some cheatsheets available online&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.git-tower.com/blog/git-cheat-sheet/"&gt;https://www.git-tower.com/blog/git-cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf"&gt;http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I mentioned before, do check out &lt;a href="http://rogerdudler.github.io/git-guide/"&gt;http://rogerdudler.github.io/git-guide/&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="answering-the-help-questions_1"&gt;Answering the help questions&lt;/h1&gt;
&lt;p&gt;I will answer the first two questions using the next subsection. Others have their own subsections.&lt;/p&gt;
&lt;h2 id="keeping-track-of-files-across-computers"&gt;Keeping track of files across computers&lt;/h2&gt;
&lt;p&gt;One of the popular solutions to the first problem is to use Dropbox. It is not a bad solution, but I hate the '.conflicted' reports that keep coming, and I don't think Dropbox provides enough space for us to put all our research data and codes. &lt;/p&gt;
&lt;p&gt;Once you get the hang of git, the answer to this pretty simple. Make a git repository for your research codes. Use it to version control your code between your home computer and work computer. You can even use &lt;code&gt;bash&lt;/code&gt; script to automate the "syncing" of the git repositories. Here is my &lt;code&gt;gu&lt;/code&gt; script that I run every time I leave a computer to ensure that there are no uncommitted changes in my local repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"================================="&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Going to Matlab"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
gm                      &lt;span class="c1"&gt;# My bash alias for going to my matlab folder&lt;/span&gt;
git status
git pull
git submodule foreach git pull
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"================================="&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Going to vimfiles"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;
gv                      &lt;span class="c1"&gt;# My bash alias for going to my vimfiles folder&lt;/span&gt;
git status
git pull
git submodule foreach git pull
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Git submodules are a cool way to have git repositories inside git repositories.  More details later in this article.&lt;/p&gt;
&lt;p&gt;Of course, this has not completely solved the problem. What happens when I forget to run the gu script &lt;strong&gt;before&lt;/strong&gt; leaving the computer??? Well, I use remote desktop connection to connect to my work computer/home computer. :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caution!&lt;/strong&gt;: Don't you use git to keep track of data. Depending on your format, it might just consider it as a binary blob or as a txt file, and unecessarily[^Unless], keep track of the incremental changes to data. Use Dropbox or any other cloud storage solutions to store data.&lt;/p&gt;
&lt;p&gt;To answer the second question, use &lt;code&gt;gitk&lt;/code&gt; to get a nice GUI on your changes.  &lt;code&gt;git diff&lt;/code&gt; is another option. From now, you don't have to worry about accidently changing the code on a late Monday night.&lt;/p&gt;
&lt;h2 id="using-git-with-overleaf"&gt;Using git with Overleaf&lt;/h2&gt;
&lt;p&gt;Quoting from &lt;a href="https://www.overleaf.com/about"&gt;Overleaf website&lt;/a&gt;, Overleaf is a collaborative writing and publishing system that makes the whole process of producing academic papers much quicker for both authors and publishers. It is a free service that lets you create, edit and share your scientific ideas easily online using &lt;a href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;, a comprehensive and powerful tool for scientific writing.&lt;/p&gt;
&lt;p&gt;You can read about how to use git to version control your papers on Overleaf from &lt;a href="https://www.overleaf.com/blog/195-new-collaborate-online-and-offline-with-overleaf-and-git-beta"&gt;https://www.overleaf.com/blog/195-new-collaborate-online-and-offline-with-overleaf-and-git-beta&lt;/a&gt;. In this section, I will explore another feature of git to go a step further.&lt;/p&gt;
&lt;p&gt;Based on the instructions given in the link above, you will have to create a local git repository for every Overleaf paper. An alternative is to use submodules.&lt;/p&gt;
&lt;h3 id="using-submodules"&gt;Using submodules&lt;/h3&gt;
&lt;p&gt;A detailed exposition can be found in &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a&gt;.  I will focus on the important commands.&lt;/p&gt;
&lt;h4 id="adding-projects"&gt;Adding projects&lt;/h4&gt;
&lt;p&gt;I add new Overleaf projects into my main git repository via the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule add https://git.overleaf.com/PROJECT_NUMBER.git PATH_TO_SAVE_THE_PROJECT
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;PROJECT_NUMBER&lt;/code&gt; can be obtained from the &lt;code&gt;Share&lt;/code&gt; button in the menu of your Overleaf project page. This command will clone the git repository for your Overleaf project into your git repository. In this section, I will call my main git repository &lt;code&gt;Parent&lt;/code&gt; sitting on the location &lt;code&gt;C:/git&lt;/code&gt; and the overleaf project &lt;code&gt;OverleafProject&lt;/code&gt;. Hence, the command to clone an existing overleaf project (with project number &lt;code&gt;1234567890123456789&lt;/code&gt; as a submodule becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /c/git/Parent
mkdir Papers
git submodule add https://git.overleaf.com/1234567890123456789.git Papers/OverleafProject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Running &lt;code&gt;git status&lt;/code&gt; shows that new files &lt;code&gt;.gitmodules&lt;/code&gt; and &lt;code&gt;Papers/OverleafProject&lt;/code&gt; were created. Commit and push the repository to your remote (at Bitbucket/Github) for making this submodule accessible to other computers as well. The git in &lt;code&gt;Parent&lt;/code&gt; repository just keeps track of the commit currently the HEAD of &lt;code&gt;Papers/OverleafProject&lt;/code&gt; points to.&lt;/p&gt;
&lt;p&gt;If you change directory into &lt;code&gt;Papers/OverleafProject&lt;/code&gt; and run &lt;code&gt;gitk&lt;/code&gt;, you will see that git sees this folder as an independent git repository with none of the history of the git repository &lt;code&gt;Parent&lt;/code&gt; appearing here. Changing codes here needs to be pushed independently, and they will influence your Overleaf project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Caution&lt;/strong&gt;: Overleaf creates a git repository only when you attempt to clone it for the first time. Their premium account is the only way (I know of) to handle changes that happened before cloning the repository.&lt;/p&gt;
&lt;p&gt;After changing the files inside &lt;code&gt;Paper/OverleafProject&lt;/code&gt;, if you change directory back to &lt;code&gt;Parent&lt;/code&gt; and type &lt;code&gt;git status&lt;/code&gt;, you will see the true power of git submodules. The changes in the submodules are summarized. Pushing these changes in the &lt;code&gt;Parent&lt;/code&gt; repository into the remote repository (git repository at Bitbucket/Github) will trigger other local repositories (other computers) linked to this remote repository to update their copies of submodules.&lt;/p&gt;
&lt;h4 id="fetching-submodules-in-other-local-repositories"&gt;Fetching submodules in other local repositories&lt;/h4&gt;
&lt;p&gt;The subsection above described how to add submodules to your project and push it to the remote repository. Let us know move to another local repository that is linked to this remote repository. To fetch all the submodule information, do the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule init                          &lt;span class="c1"&gt;# Fetch all the submodule information linked to this git repository&lt;/span&gt;
git submodule update                        &lt;span class="c1"&gt;# Clone the submodules into their respective locations&lt;/span&gt;
git submodule foreach git checkout master   &lt;span class="c1"&gt;# Checkout the master branch in each of these submodules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last command is to avoid a &lt;code&gt;detached HEAD&lt;/code&gt;&lt;sup id="fnref-detHEAD"&gt;&lt;a class="footnote-ref" href="#fn-detHEAD"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4 id="moving-the-git-submodule-around"&gt;Moving the git submodule around&lt;/h4&gt;
&lt;p&gt;More often than not, we will reorganize our folders, and we will require the git submodules to be moved from a place to another. Let us say we want to move &lt;code&gt;Papers/OverleafProject&lt;/code&gt; and put it in &lt;code&gt;Papers/Done/OverleafProject&lt;/code&gt;. Achieve this&lt;sup id="fnref-submmv"&gt;&lt;a class="footnote-ref" href="#fn-submmv"&gt;2&lt;/a&gt;&lt;/sup&gt; by (no matter where you are currently in the git repository &lt;code&gt;Parent&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git mv Papers/OverleafProject Papers/Done/OverleafProject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Papers/OverleafProject&lt;/code&gt; is the old name (location) of the submodule. Check in &lt;code&gt;Parent/.gitmodules&lt;/code&gt; to confirm. Doing a git push will update your remote repositories and subsequent, &lt;code&gt;git pull&lt;/code&gt;, &lt;code&gt;git submodule init&lt;/code&gt;, and &lt;code&gt;git submodule update&lt;/code&gt; at other local computers will change the location for you.&lt;/p&gt;
&lt;h4 id="deleting-a-git-submodule"&gt;Deleting a git submodule&lt;/h4&gt;
&lt;p&gt;Once you are done with a research paper, you may want to burn the bridge to the Overleaf project and just retain the files. Do the following&lt;sup id="fnref-submdelete"&gt;&lt;a class="footnote-ref" href="#fn-submdelete"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mv asubmodule asubmodule_tmp    &lt;span class="c1"&gt;# In case, something goes wrong.&lt;/span&gt;
git submodule deinit asubmodule &lt;span class="c1"&gt;# Deinits the submodule (opposite of submodule init)   &lt;/span&gt;
&lt;span class="c1"&gt;# There are two options for the next step&lt;/span&gt;
&lt;span class="c1"&gt;# asubmodule_NAME is the name of the submodule as seen by the parent git repository. Check .gitmodules to confirm.&lt;/span&gt;
git rm asubmodule_NAME          &lt;span class="c1"&gt;# Option 1: Remove the submodule from git as well as your storage unit&lt;/span&gt;
git rm --cached asubmodule      &lt;span class="c1"&gt;# Option 2: Remove the submodule from git, but leave it on your storage unit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="using-git-to-merge-codes_2"&gt;Using git to merge codes&lt;/h2&gt;
&lt;p&gt;Let us say we have two codebases --- CB_A and CB_B --- that forked from the legacy code. Let us say the legacy code CB_L has a git repository. If not, create one for it using &lt;code&gt;git init&lt;/code&gt;. The key idea will be to use git branching to handle the merging.  Do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let us say we are on the legacy codebase CB_L's git repository and it is on&lt;/span&gt;
&lt;span class="c1"&gt;# the master branch. Create a new git branch named CB_A from the current point&lt;/span&gt;
&lt;span class="c1"&gt;# of legacy code. This branch will be used to store the code base CB_A&lt;/span&gt;
git checkout -b CB_A    
&lt;span class="c1"&gt;# Overwrite this branch of legacy code with the code base CB_A (Do your stuff)&lt;/span&gt;
&lt;span class="c1"&gt;# Commit your changes in this branch with git commit (Do your stuff)&lt;/span&gt;
&lt;span class="c1"&gt;# Go back to the legacy code CB_L&lt;/span&gt;
git checkout master     
&lt;span class="c1"&gt;# Create a new git branch named CB_B from the current point of legacy code. This&lt;/span&gt;
&lt;span class="c1"&gt;# branch will be used to store the code base CB_B&lt;/span&gt;
git checkout -b CB_B    
&lt;span class="c1"&gt;# Overwrite this branch of legacy code with the code base CB_B (Do your stuff)&lt;/span&gt;
&lt;span class="c1"&gt;# Commit your changes in this branch with git commit (Do your stuff)&lt;/span&gt;
&lt;span class="c1"&gt;# Go back to the legacy code CB_L&lt;/span&gt;
git checkout master     
&lt;span class="c1"&gt;# Create a new git branch named CB_merge from the current point of legacy code.&lt;/span&gt;
&lt;span class="c1"&gt;# This will store the merged code.&lt;/span&gt;
git checkout -b CB_merge
&lt;span class="c1"&gt;# This will merge CB_A to the branch CB_merge. This should happen without any&lt;/span&gt;
&lt;span class="c1"&gt;# hiccups. (Now, CB_A will be identical to CB_merge. Check using gitk)&lt;/span&gt;
git merge CB_A          
&lt;span class="c1"&gt;# Major step: This will merge CB_B to the branch CB_merge containing CB_A&lt;/span&gt;
&lt;span class="c1"&gt;# codebase. This will potentially yield conflicts because they share the same&lt;/span&gt;
&lt;span class="c1"&gt;# ancestor node but have different changes. However, git will list out the files&lt;/span&gt;
&lt;span class="c1"&gt;# that have conflict and also demarcate the lines. Manually fix them, and now you have successfully merged codes with minimal effort form your side.&lt;/span&gt;
git merge CB_B          
&lt;span class="c1"&gt;# In case you want to update the legacy code with your newly merged working code&lt;/span&gt;
git checkout master
git merge CB_merge          
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-UnixGit"&gt;
&lt;p&gt;If you are in Unix, you can install it using your package manager.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-UnixGit" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-submmv"&gt;
&lt;p&gt;Source --- &lt;a href="http://stackoverflow.com/a/6310246/1846549"&gt;http://stackoverflow.com/a/6310246/1846549&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-submmv" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-detHEAD"&gt;
&lt;p&gt;Read
&lt;a href="https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit"&gt;https://www.git-tower.com/learn/git/faq/detached-head-when-checkout-commit&lt;/a&gt;
if you want to know more.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-detHEAD" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-submdelete"&gt;
&lt;p&gt;Source ---
&lt;a href="http://stackoverflow.com/a/16162000/1846549"&gt;http://stackoverflow.com/a/16162000/1846549&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-submdelete" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Git"></category></entry><entry><title>ACC2017: Computation of forward stochastic reach sets: Application to dynamic obstacle avoidance</title><link href="/acc2017.html" rel="alternate"></link><published>2017-02-08T00:00:00-07:00</published><updated>2017-02-08T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-02-08:/acc2017.html</id><summary type="html">&lt;p&gt;Summary of the ACC 2017 paper&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
This blog post will summarize my paper &lt;strong&gt;Computation of forward stochastic
reach sets: Application to stochastic, dynamic obstacle avoidance&lt;/strong&gt; accepted
for publication at American Control Conference (ACC), 2017. The conference will
    happen on May 24-26, 2017 at Seattle, WA, USA. This work was done in
    collaboration with &lt;a href="http://www.cs.unm.edu/amprg/People/baisravan/"&gt;Dr. Baisravan
    HomChaudhuri&lt;/a&gt; and &lt;a href="http://www.unm.edu/~oishi"&gt;Prof.
    Meeko Oishi&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-is-this-paper-about"&gt;What is this paper about?&lt;/h1&gt;
&lt;h2 id="high-level-description"&gt;High-level description&lt;/h2&gt;
&lt;p&gt;The next five years looks poised to make autonomous transportation a reality
--- both in our cities&lt;sup id="fnref-selfdriving"&gt;&lt;a class="footnote-ref" href="#fn-selfdriving"&gt;1&lt;/a&gt;&lt;/sup&gt; and in our oceans&lt;sup id="fnref-selfship"&gt;&lt;a class="footnote-ref" href="#fn-selfship"&gt;2&lt;/a&gt;&lt;/sup&gt;, and
researchers around the world are looking at different aspects of autonomous
transportations. A major component of autonomous transportation is avoiding
obstacles, which in itself, is a complex task involving sensing, planning, and
execution. This paper focuses on the planning component.&lt;/p&gt;
&lt;p&gt;Imagine the scenario where a self-driving car is attempting to avoid hitting a
pedestrian&lt;sup id="fnref-Chris"&gt;&lt;a class="footnote-ref" href="#fn-Chris"&gt;3&lt;/a&gt;&lt;/sup&gt;.  Clearly, it is impossible to predict exactly what the
pedestrian is going to do at any given time making this problem really hard.
While most of the software and algorithms are proprietary, the approach taken
by the industry has been to use several of the available well-tested software
and hardware solutions, put them together, and tune/train learning algorithms
to perform in a desired manner&lt;sup id="fnref-MUO"&gt;&lt;a class="footnote-ref" href="#fn-MUO"&gt;4&lt;/a&gt;&lt;/sup&gt;.  However, this approach lacks the
guarantee of safety, something that would be crucial for making the dream of
autonomous transportation a reality&lt;sup id="fnref-NYT"&gt;&lt;a class="footnote-ref" href="#fn-NYT"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;We believe control theory can be leveraged to provide the required guarantees
of safety.  We account for the pedestrian's action into the model as a
disturbance. There are two approaches in control to provide safety guarantees
in the presence of disturbance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Absolute guarantee&lt;/strong&gt;: a conservative approach where the control
actions are designed by treating the disturbance as an adversary, and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Probabilistic guarantee&lt;/strong&gt;: a stochastic approach where the control actions
are designed by respecting the likelihood of the disturbance taking different
actions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these approaches have their pros and cons. Due to the absolute safety
requirement, the conservative approaches may fail in complex environments.  The
stochastic approach can find control actions even in complex environments but
requires additional information (likelihoods of the disturbance taking
different actions). Nevertheless, both of these approaches can be used to
design the control actions that needs to be taken to ensure that the desired
safety levels are achieved. &lt;/p&gt;
&lt;p&gt;If you like to skip the technical details, you may directly
move on to the &lt;a href="#application"&gt;section&lt;/a&gt; where we compare how using the stochastic
approach a robot avoids all the obstacles, and successfully reaches a goal state.&lt;/p&gt;
&lt;h2 id="a-more-technical-description"&gt;A more technical description&lt;/h2&gt;
&lt;p&gt;In this paper, we consider uncontrolled discrete-time nonlinear systems perturbed by
an affine discrete disturbance&lt;sup id="fnref-systems"&gt;&lt;a class="footnote-ref" href="#fn-systems"&gt;6&lt;/a&gt;&lt;/sup&gt;. We assume that the disturbance has a
finite support, and its stochastics (probability mass function) is known.  We
are interested in performing the &lt;strong&gt;forward stochastic reachability analysis&lt;/strong&gt;,
that is, characterize the stochasticity of the state of a system at some point
of time in future when the system is initialized at a known initial condition.
For any given point of time in future, we propose an &lt;strong&gt;iterative formulation&lt;/strong&gt;
for computing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;forward stochastic reach set (FSR set) --- the states which the system can
reach with non-zero likelihood.&lt;/li&gt;
&lt;li&gt;forward stochastic reach probability measure  (FSRPM) --- the probability
mass function associated with the state, a discrete random vector.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We utilize the forward reachability analysis to avoid rigid body obstacles in a
stochastic environment via an &lt;strong&gt;occupancy function&lt;/strong&gt;. The occupancy function
provides the probability of finding an obstacle at a given point in the state
space. We show that to achieve a desired probabilistic safety, avoiding a
corresponding super-level set of the occupancy function is sufficient. We also
analyze the convexity properties of the occupancy function, and these results
ensure that the obstacle avoidance problem can be solved very efficiently. We
leverage existing work on avoiding dynamic obstacles using a mixed-integer
programming framework&lt;sup id="fnref-IP"&gt;&lt;a class="footnote-ref" href="#fn-IP"&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id="what-is-so-great-about-this-paper_1"&gt;What is so great about this paper?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Decoupled analysis&lt;/strong&gt; for forward stochastic reachability analysis: The
proposed iterative formulation allows for leveraging existing tools for
deterministic reachability analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Occupancy function&lt;/strong&gt;: We define the occupancy function using forward
reachability analysis and analyze its convexity properties.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stochastically moving obstacle avoidance&lt;/strong&gt; using occupancy function: We
demonstrate the utility of the occupancy function in formulating a convex
optimization problem for obstacle avoidance.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison of the conservative and the stochastic approaches&lt;/strong&gt; for
obstacle avoidance problems: We discuss how the stochastic approach prevails in
complex situations where more information is available.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a name="application"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="can-you-give-me-an-example-of-the-application-of-this-method"&gt;Can you give me an example of the application of this method?&lt;/h1&gt;
&lt;p&gt;We now consider the specific problem of robot navigation in an environment with
rigid body obstacles moving in straight lines with stochastic velocities. &lt;/p&gt;
&lt;h2 id="relating-this-problem-to-the-high-level-description"&gt;Relating this problem to the high-level description&lt;/h2&gt;
&lt;p&gt;The robot here can be thought of as the self-driving car, and the rigid body
obstacles as the pedestrians with their associated 'safety bubbles'.&lt;/p&gt;
&lt;h2 id="what-is-the-information-provided-for-this-problem"&gt;What is the information provided for this problem?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;the initial position of the robots R and the obstacles,&lt;/li&gt;
&lt;li&gt;the goal position for the robot R,&lt;/li&gt;
&lt;li&gt;the desired guarantee of probabilistic safety,&lt;/li&gt;
&lt;li&gt;the deterministic LTI dynamics of the robot R,&lt;/li&gt;
&lt;li&gt;the disturbed (stochastic) LTI dynamics of the obstacles, and&lt;/li&gt;
&lt;li&gt;the probability mass function of the stochastic velocities of the obstacles.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-should-be-computed-for-this-problem"&gt;What should be computed for this problem?&lt;/h2&gt;
&lt;p&gt;We would like to drive the robot R to the desired goal in finite time while
ensuring a probabilistic guarantee of safety. We compute a receding horizon
controller input sequence that achieves the desired result.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;/h2&gt;
&lt;p&gt;We consider the control strategies given by both the approaches for robot R.
The &lt;strong&gt;red robot&lt;/strong&gt; seeks a &lt;em&gt;probabilistic guarantee&lt;/em&gt; of safety, and the &lt;strong&gt;pink
robot&lt;/strong&gt; seeks an &lt;em&gt;absolute guarantee&lt;/em&gt; of safety.  The red and pink robots are
assumed to have point mass dynamics discretized in time with bounded control
authority forcing it to always move forward in the $y$-direction. The obstacles
are constrained to move in straight lines. 
&lt;div class="container"&gt;
&lt;div class="col-md-4"&gt;&lt;/div&gt;
&lt;div class="col-md-4" style="padding-left: 0px;  padding-right: 0px;"&gt;
&lt;img alt="A GIF should have appeared here." class="img-responsive" src="images/ACC2017.gif"&gt;
&lt;/img&gt;&lt;/div&gt;
&lt;/div&gt;
Snapshots&lt;sup id="fnref-GIF"&gt;&lt;a class="footnote-ref" href="#fn-GIF"&gt;9&lt;/a&gt;&lt;/sup&gt; of the environment with the robot R controlled using different
approaches: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The goal position for the robots is denoted by green circle,&lt;/li&gt;
&lt;li&gt;The red robot's trajectory is indicated by the blue line, &lt;/li&gt;
&lt;li&gt;The pink robot's trajectory is indicated by the cyan line, and&lt;/li&gt;
&lt;li&gt;The blue boxes indicate the obstacles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the simulation (shown above) is just a single trial, the red robot can also
collide with the obstacles in some of the trials due to the stochasticity in the
environment.  However, in an experiment involving a fixed number of trials, the
average number of trials ending in a collision is guaranteed to be less than a
given threshold as desired.&lt;/p&gt;
&lt;h1 id="where-do-i-get-more-details_1"&gt;Where do I get more details?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Paper is available on &lt;a href="https://arxiv.org/abs/1610.03472v1"&gt;Arxiv&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Project details can be found at my &lt;a href="http://unm.edu/~abyvinod/projects.html#reach"&gt;academic website&lt;/a&gt;.
&lt;!--* MATLAB code for generating these figures can be downloaded from
&lt;a href="http://unm.edu/~abyvinod/files/HSCC2017.zip"&gt;here&lt;/a&gt;.--&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-selfdriving"&gt;
&lt;p&gt;&lt;a href="http://spectrum.ieee.org/transportation/advanced-cars/2017-the-year-of-selfdriving-cars-and-trucks"&gt;http://spectrum.ieee.org/transportation/advanced-cars/2017-the-year-of-selfdriving-cars-and-trucks&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-selfdriving" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-selfship"&gt;
&lt;p&gt;&lt;a href="http://spectrum.ieee.org/transportation/marine/forget-autonomous-cars-autonomous-ships-are-almost-here"&gt;http://spectrum.ieee.org/transportation/marine/forget-autonomous-cars-autonomous-ships-are-almost-here&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-selfship" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-Chris"&gt;
&lt;p&gt;Chris Urmson, the former CTO of Google's self-driving car project
(now Waymo), talks about this in a TED talk
&lt;a href="https://www.youtube.com/watch?v=tiwVMrTLUWg&amp;amp;feature=youtu.be&amp;amp;t=7m11s"&gt;https://www.youtube.com/watch?v=tiwVMrTLUWg&amp;amp;feature=youtu.be&amp;amp;t=7m11s&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-Chris" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-MUO"&gt;
&lt;p&gt;&lt;a href="http://www.makeuseof.com/tag/how-self-driving-cars-work-the-nuts-and-bolts-behind-googles-autonomous-car-program/"&gt;http://www.makeuseof.com/tag/how-self-driving-cars-work-the-nuts-and-bolts-behind-googles-autonomous-car-program/&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-MUO" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-NYT"&gt;
&lt;p&gt;&lt;a href="https://www.nytimes.com/interactive/2016/12/14/technology/how-self-driving-cars-work.html?_r=0"&gt;https://www.nytimes.com/interactive/2016/12/14/technology/how-self-driving-cars-work.html?_r=0&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-NYT" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-systems"&gt;
&lt;p&gt;This class of systems includes affine noise perturbed LTI
discrete-time systems with known state feedback. The work is also applicable to
affine noise perturbed LTI discrete-time systems with open loop controllers
after some minor modifications.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-systems" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-dist"&gt;
&lt;p&gt;The disturbance is assumed to be an IID random process, but we can
relax the identical assumption if needed.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-dist" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-IP"&gt;
&lt;p&gt;&lt;a href="http://ieeexplore.ieee.org/abstract/document/1384742/"&gt;Tom Schouwenaars, Jonathan How, and Eric Feron. "Receding horizon path planning with implicit safety guarantees." In &lt;em&gt;American Control Conference&lt;/em&gt;, vol. 6, pp. 5576-5581. IEEE, 2004.&lt;/a&gt;.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-IP" title="Jump back to footnote 8 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-GIF"&gt;
&lt;p&gt;The GIFs were created using &lt;a href="http://gifcreator.me/"&gt;http://gifcreator.me/&lt;/a&gt; and &lt;a href="http://resizeimage.net/"&gt;http://resizeimage.net/&lt;/a&gt;.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-GIF" title="Jump back to footnote 9 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="My Research"></category><category term="Stochastic Reachability"></category><category term="Obstacle Avoidance"></category><category term="Model Predictive Control"></category></entry><entry><title>Commenting on this blog</title><link href="/comments_in_blog.html" rel="alternate"></link><published>2017-02-05T00:00:00-07:00</published><updated>2017-02-05T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-02-05:/comments_in_blog.html</id><summary type="html">&lt;p&gt;I have chosen not to implement a commenting system. You can instead email me your comments. I also describe how to print a custom message based on article title.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static website generators are good in the sense that they are quick and cheap
to develop&lt;sup id="fnref-wiki"&gt;&lt;a class="footnote-ref" href="#fn-wiki"&gt;1&lt;/a&gt;&lt;/sup&gt; and robust when it comes to trolls, spambots, and hackers&lt;sup id="fnref-hacking"&gt;&lt;a class="footnote-ref" href="#fn-hacking"&gt;2&lt;/a&gt;&lt;/sup&gt;
(in general). However, my blog lacked one feature --- commenting.
Since the purpose of this blog is to disseminate my research work and other
ideas that may/may not be useful to the world, I definitely want to open up this blog posts for discussion. However, after much
thought, I have decided to leave out the commenting feature on this
blog&lt;sup id="fnref-popsci"&gt;&lt;a class="footnote-ref" href="#fn-popsci"&gt;3&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
&lt;p&gt;I removed Disqus, however, by commenting the line having
&lt;code&gt;includes/disqus_script.html&lt;/code&gt; in &lt;code&gt;pelican-bootstrap3/templates/base.html&lt;/code&gt; and
the line having &lt;code&gt;includes/comments.html&lt;/code&gt; in
&lt;code&gt;pelican-bootstrap3/templates/article.html&lt;/code&gt; and
&lt;code&gt;pelican-bootstrap3/templates/page.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To still allow for discussion, I wanted to remind the readers that they can
always contact me via email. I wanted this message to appear only on webpages
which I thought deserved commenting. So, I added the following code in
&lt;code&gt;pelican-bootstrap3/templates/includes/footer.html&lt;/code&gt;. The if-condition ensures
that the message is skipped for webpages where I do not want to display this
message. The variable &lt;code&gt;output_file&lt;/code&gt; is generated by Pelican and contains the
relative path for every webpage from the site URL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'categories.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'tags.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'archives.html'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pages'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'tags'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'author'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;skipped&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;know&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"container entry-content"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"mailto:YOUR_EMAIL"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;YOUR_EMAIL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ideally, I would like the message appear here (above the bar separating the
footnotes) but I am still figuring out how Pelican generates footnotes.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-wiki"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Static_web_page&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-wiki" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-hacking"&gt;
&lt;p&gt;https://www.bassi.io/articles/2014/07/18/building-a-website-with-pelican/&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-hacking" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-popsci"&gt;
&lt;p&gt;http://www.popsci.com/science/article/2013-09/why-were-shutting-our-comments&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-popsci" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Pelican"></category></entry><entry><title>Adding papers on Arxiv</title><link href="/arxivAdd.html" rel="alternate"></link><published>2017-02-03T00:00:00-07:00</published><updated>2017-02-03T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-02-03:/arxivAdd.html</id><summary type="html">&lt;p&gt;Some tips on adding TeX generated papers to Arxiv&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I published one of my &lt;a href="https://arxiv.org/abs/1610.04550"&gt;papers&lt;/a&gt; to
Arxiv. You can find an informal discussion on this paper &lt;a href="{filename}8 -
hscc2017.md"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;There were a couple of things which I found relevant and omitted in
the Arxiv's wizard. It is there on their FAQs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arxiv does not accept &lt;code&gt;.bib&lt;/code&gt; files. Instead, we have to upload the &lt;code&gt;.bbl&lt;/code&gt;
file. &lt;sup id="fnref-bbl"&gt;&lt;a class="footnote-ref" href="#fn-bbl"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Arxiv does not accept &lt;code&gt;.pdf&lt;/code&gt; files when generated using TeX. We have to
upload the tex files, necessary figures, style files, and the &lt;code&gt;.bbl&lt;/code&gt; file.
&lt;sup id="fnref-thingsneeded"&gt;&lt;a class="footnote-ref" href="#fn-thingsneeded"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Adding multiple items on Arxiv is a pain. The best way to accomplish this is
to &lt;code&gt;zip&lt;/code&gt; all the required files and then upload the zip. Arxiv can process
&lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;tar.gz&lt;/code&gt;.&lt;sup id="fnref-zipping"&gt;&lt;a class="footnote-ref" href="#fn-zipping"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-bbl"&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/help/submit_tex#bibtex"&gt;https://arxiv.org/help/submit_tex#bibtex&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-bbl" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-thingsneeded"&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/help/submit_tex#wegotem"&gt;https://arxiv.org/help/submit_tex#wegotem&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-thingsneeded" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-zipping"&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/help/tar"&gt;https://arxiv.org/help/tar&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-zipping" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Arxiv"></category></entry><entry><title>HSCC2017: Forward Stochastic Reachability Analysis for Uncontrolled Linear Systems using Fourier Transforms</title><link href="/hscc2017.html" rel="alternate"></link><published>2017-02-03T00:00:00-07:00</published><updated>2017-02-03T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-02-03:/hscc2017.html</id><summary type="html">&lt;p&gt;Summary of the HSCC 2017 paper&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;
This blog post will summarize my paper &lt;strong&gt;Forward Stochastic Reachability
Analysis for Uncontrolled Linear Systems using Fourier Transforms&lt;/strong&gt; published at
Hybrid Systems: Computation and Control 2017. The conference will happen on
April 18-20th, 2017 at Pittsburg, PA, USA. This work was done in collaboration
with &lt;a href="http://www.cs.unm.edu/amprg/People/baisravan/"&gt;Dr. Baisravan HomChaudhuri&lt;/a&gt;
and &lt;a href="http://www.unm.edu/~oishi"&gt;Prof. Meeko Oishi&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="what-is-this-paper-about"&gt;What is this paper about?&lt;/h1&gt;
&lt;h2 id="high-level-description"&gt;High-level description&lt;/h2&gt;
&lt;p&gt;Imagine we have a boat facing a crisis drifting in the ocean. Let us say we have a model
of the ocean current. This model will help us predict &lt;em&gt;exactly&lt;/em&gt; where the boat will drift
to if the only force acting on it is the ocean current. However, we know that
the boat can be subjected to our forces like wind, waves which will be pretty
difficult to model. We account for these forces in form of a disturbance to our
model, and this disturbance will &lt;em&gt;corrupt&lt;/em&gt; our predictions. Assuming we have
some information about the likelihood of the disturbance's actions, a
natural question to ask is --- &lt;strong&gt;can we predict with some likelihood where the
boat will drift to and what is the smallest set that covers all possible locations where
the boat can drift to?&lt;/strong&gt; Answering this question can help a rescuer ship, say
the coast guard, act swiftly and increase the likelihood of success when
searching a vast ocean for the boat. This paper provides a mathematical
structure to this problem and proposes an efficient way to compute the
likelihood as well as the set. If you like to skip the technical details, you
may directly move on to the &lt;a href="#application"&gt;section&lt;/a&gt; where we apply this work on
rescuing the boat.&lt;/p&gt;
&lt;h2 id="a-more-technical-description"&gt;A more technical description&lt;/h2&gt;
&lt;p&gt;We look at discrete-time uncontrolled linear systems&lt;sup id="fnref-systems"&gt;&lt;a class="footnote-ref" href="#fn-systems"&gt;1&lt;/a&gt;&lt;/sup&gt; perturbed by a
disturbance&lt;sup id="fnref-dist"&gt;&lt;a class="footnote-ref" href="#fn-dist"&gt;2&lt;/a&gt;&lt;/sup&gt; whose stochastics (say probability density function) is known. We
are interested in performing the &lt;strong&gt;forward stochastic reachability analysis&lt;/strong&gt;, that
is, characterize the stochasticity of the state of a system at some point of
time in future when the system is initialized at a known initial condition.  For
any given point of time in future, we propose an &lt;strong&gt;analytical formulation&lt;/strong&gt;
for computing via Fourier transforms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;forward stochastic reach set (FSR set) --- the smallest closed subset of the state
space that occurs almost surely.&lt;/li&gt;
&lt;li&gt;forward stochastic reach probability density  (FSRPD) --- the probability density
associated with the state, an absolutely continuous random vector.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Moreover, we provide sufficient conditions for FSRPD to be &lt;strong&gt;logconcave&lt;/strong&gt;.
Logconcavity ensures that &lt;strong&gt;convexity&lt;/strong&gt; of the constraints and objective
functions created using forward stochastic reachability analysis. Convex
optimization problems are sought after since they are tractable and can
generally be solved very efficiently.&lt;/p&gt;
&lt;p&gt;We discuss one application of this analysis --- maximizing the probability of
capture of a non-adversarial uncontrolled target (with stochastic dynamics) by a
controlled robot (with deterministic dynamics).&lt;/p&gt;
&lt;h1 id="what-is-so-great-about-this-work_1"&gt;What is so great about this work?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Not a Eulerian method (not a grid-based method)&lt;/strong&gt;: This implies that we
can mitigate the &lt;a href="https://en.wikipedia.org/wiki/Curse_of_dimensionality"&gt;curse of
dimensionality&lt;/a&gt;. Existing
approaches of performing forward stochastic reachability analysis are through
dynamic programming&lt;sup id="fnref-SummersAutomatica2010"&gt;&lt;a class="footnote-ref" href="#fn-SummersAutomatica2010"&gt;3&lt;/a&gt;&lt;/sup&gt; and inverted dynamics. Dynamic
programming can not be applied to dimensions higher than 5.&lt;/li&gt;
&lt;li&gt;Can handle &lt;strong&gt;unbounded stochastic disturbances&lt;/strong&gt; and is &lt;strong&gt;not restricted to
Gaussians&lt;/strong&gt;: We demonstrate our method to an exponential disturbance as
well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sufficient conditions for the convexity&lt;/strong&gt; of the FSR set and the FSRPD
provided&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Convex optimization formulation&lt;/strong&gt; for non-adversarial stochastically moving
target problem&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt;: Usefulness demonstrated for stochastic motion planning
problems. We also anticipate the application of this method in obstacle avoidance,
aircraft trajectory planning, and other venues.
&lt;a name="application"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="can-you-give-me-an-example-of-the-application-of-this-method"&gt;Can you give me an example of the application of this method?&lt;/h1&gt;
&lt;p&gt;In this paper, we analyze the problem of capture of a non-adversarial target
(robot G) with stochastic dynamics using a robot (robot R) with deterministic
dynamics. &lt;/p&gt;
&lt;h2 id="relating-this-problem-to-the-high-level-description"&gt;Relating this problem to the high-level description&lt;/h2&gt;
&lt;p&gt;Think of robot G as a boat facing a mayday and robot R as
the rescuer ship coming to its rescue. Using the results of this paper, we can
compute when and where can the rescuer ship meet the boat-in-distress. We
also provide the actions the rescuer ship must take to reach the desired meeting
point.&lt;/p&gt;
&lt;h2 id="what-is-the-information-provided-for-this-problem"&gt;What is the information provided for this problem?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;the initial position of the robots R and G,&lt;/li&gt;
&lt;li&gt;the deterministic LTI dynamics of the robot R,&lt;/li&gt;
&lt;li&gt;the disturbed (stochastic) LTI dynamics of the robot G, and&lt;/li&gt;
&lt;li&gt;the probability density function of the disturbance affecting the dynamics of
robot G.
&lt;!--
--- $x_R[0]$ and $x_G[0]$
--- $ x_R[t+1]=A_R x_R[t]+B_R u_R[t]$
--- $ x_G[t+1]=A_G x_G[t]+B_G w_G[t]$
--- $w_G[t]\sim \psi_w$ 
 $\pi_{\mathrm{open}}$--&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-should-be-computed-for-this-problem"&gt;What should be computed for this problem?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;the (optimal) time instant of capture which results in maximum probability of
capture $\tau^\ast$&lt;/li&gt;
&lt;li&gt;the (optimal) position for robot R that maximizes the probability of capture
at this instant $x_R^\ast[\tau^\ast]$&lt;/li&gt;
&lt;li&gt;the open-loop controller&lt;sup id="fnref-robotG"&gt;&lt;a class="footnote-ref" href="#fn-robotG"&gt;4&lt;/a&gt;&lt;/sup&gt; input sequence that drives robot R from the
given initial position to the optimal position of capture&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Robot R is assumed to have point mass dynamics discretized in time with bounded
control authority. This implies that robot R need not cover the entire state
space within a given time horizon, and the reachable states constraint the
positions available for capture.&lt;/p&gt;
&lt;h2 id="case-1-robot-g-has-point-mass-dynamics-and-gaussian-perturbed-dynamics"&gt;Case 1: Robot G has point mass dynamics and Gaussian perturbed dynamics&lt;/h2&gt;
&lt;p&gt;Robot G has point mass dynamics discretized in time with 'inputs' as a
discrete-time bivariate Gaussian random process. For Gaussians, the mode and the
mean coincide. The optimization problem provides the optimal capture position
while satisfying the constraints. &lt;a href="/images/HSCC2017GaussHQ.gif"&gt;View&lt;/a&gt; a higher quality GIF.&lt;/p&gt;
&lt;div class="container"&gt;
&lt;div class="col-md-4"&gt;&lt;/div&gt;
&lt;div class="col-md-4" style="padding-left: 0px;  padding-right: 0px;"&gt;
&lt;img alt="A GIF should have appeared here." class="img-responsive" src="images/HSCC2017Gauss.gif"&gt;
&lt;/img&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Snapshots&lt;sup id="fnref-GIF"&gt;&lt;a class="footnote-ref" href="#fn-GIF"&gt;5&lt;/a&gt;&lt;/sup&gt; of optimal capture positions $x_R^\ast[\tau]$ over the time horizon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The black line shows the mean position trajectory of robot G, &lt;/li&gt;
&lt;li&gt;The contour plot characterizes the FSRPD of the state of robot G, &lt;/li&gt;
&lt;li&gt;The blue box shows the set of states reachable by robot R at the time of interest, and &lt;/li&gt;
&lt;li&gt;The red box shows the capture region centered at the current position of robot R (robot G is captured if it lies inside the red box).&lt;/li&gt;
&lt;li&gt;The annotation box shows the time of interest $\tau$ as well as the probability of
capture corresponding to $x_R^\ast[\tau]$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="case-2-robot-g-has-double-integrator-dynamics-and-exponential-perturbed-dynamics"&gt;Case 2: Robot G has double integrator dynamics and exponential perturbed dynamics&lt;/h2&gt;
&lt;p&gt;Robot G has double integrator dynamics discretized in time with 'inputs' as a
discrete-time bivariate exponential random process. For exponential random
vectors, the mode and the mean do not coincide, to begin with, making this a
nontrivial problem. The optimization problem provides the optimal capture
position while satisfying the constraints. &lt;a href="/images/HSCC2017ExpHQ.gif"&gt;View&lt;/a&gt; a higher quality GIF.&lt;/p&gt;
&lt;div class="container"&gt;
&lt;div class="col-md-4"&gt;&lt;/div&gt;
&lt;div class="col-md-4" style="padding-left: 0px;  padding-right: 0px;"&gt;
&lt;img alt="A GIF should have appeared here." class="img-responsive" src="/images/HSCC2017Exp.gif"&gt;
&lt;/img&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Snapshots&lt;sup id="fnref-GIF"&gt;&lt;a class="footnote-ref" href="#fn-GIF"&gt;5&lt;/a&gt;&lt;/sup&gt; of optimal capture positions $x_R^\ast[\tau]$ over the time horizon&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The black line shows the mean position trajectory of robot G, &lt;/li&gt;
&lt;li&gt;The contour plot characterizes the FSRPD of the state of robot G, &lt;/li&gt;
&lt;li&gt;The blue box shows the set of states reachable by robot R at the time of interest, and &lt;/li&gt;
&lt;li&gt;The red box shows the capture region centered at the current position of robot R (robot G is captured if it lies inside the red box).&lt;/li&gt;
&lt;li&gt;The annotation box shows the time of interest $\tau$ as well as the probability of
capture corresponding to $x_R^\ast[\tau]$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="where-do-i-get-more-details_1"&gt;Where do I get more details?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Paper is available on &lt;a href="https://arxiv.org/abs/1610.04550"&gt;Arxiv&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Project details can be found at my &lt;a href="http://unm.edu/~abyvinod/projects.html#reach"&gt;academic website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;MATLAB code for generating these figures can be downloaded from &lt;a href="http://unm.edu/~abyvinod/files/HSCC2017.zip"&gt;here&lt;/a&gt;.
&lt;!--* Questions/bugs can be sent to &lt;code&gt;aby[dot]vinod[at]gmail[dot]com&lt;/code&gt;. --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-systems"&gt;
&lt;p&gt;This class of systems includes affine noise perturbed LTI
discrete-time systems with known state feedback. The work is also applicable to
affine noise perturbed LTI discrete-time systems with open loop controllers
after some minor modifications.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-systems" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-dist"&gt;
&lt;p&gt;The disturbance is assumed to be an IID random process, but we can
relax the identical assumption if needed.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-dist" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-SummersAutomatica2010"&gt;
&lt;p&gt;&lt;a href="http://linkinghub.elsevier.com/retrieve/pii/S0005109810003547"&gt;Automatica 2010, Summers et.
al&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-SummersAutomatica2010" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-robotG"&gt;
&lt;p&gt;Here, open-loop controller refers to the fact that the control
actions taken by robot R are independent of the actual current position of robot
G, which is a realization of the random process $x_G[\cdot]$.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-robotG" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-GIF"&gt;
&lt;p&gt;The GIFs were created using
&lt;a href="http://gifcreator.me/"&gt;http://gifcreator.me/&lt;/a&gt;.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-GIF" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="My Research"></category><category term="Stochastic Reachability"></category><category term="Convex Optimization"></category></entry><entry><title>Create bookmarks when including pdfs using pdflatex</title><link href="/bookmarkPDFinclude.html" rel="alternate"></link><published>2017-01-20T00:00:00-07:00</published><updated>2017-01-20T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-01-20:/bookmarkPDFinclude.html</id><summary type="html">&lt;p&gt;Python code to create bookmarks for latex&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the README file from my &lt;a href="https://bitbucket.org/abyvinod/createbookmarkincludepdf"&gt;Bitbucket
repository&lt;/a&gt; for the
code. Do check it out!&lt;/p&gt;
&lt;h2 id="problem"&gt;Problem&lt;/h2&gt;
&lt;p&gt;Extract bookmarks from a pdf that has to be included as is into another pdf
created using pdflatex. Includepdf package ignores pdf annotations.&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;p&gt;Use pdftk to fetch the annotations, python to parse through these annotations,
and bookmark package to feed it back to pdflatex.&lt;/p&gt;
&lt;h2 id="how-do-i-get-set-up"&gt;How do I get set up?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tested on Python 3.5 and TexLive 2015 with bookmark package installed&lt;/li&gt;
&lt;li&gt;Requires:&lt;ul&gt;
&lt;li&gt;re, os, subprocess&lt;/li&gt;
&lt;li&gt;pdftk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-do-i-run-the-code"&gt;How do I run the code?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Copy the python script into the folder where the parent tex file resides.&lt;/li&gt;
&lt;li&gt;Edit three variables:&lt;ul&gt;
&lt;li&gt;filename --- Relative path from the parent tex file to the pdf to be
  included (without the .pdf extension)&lt;/li&gt;
&lt;li&gt;parentLevel --- Bookmark level at which the pdf is to be included&lt;/li&gt;
&lt;li&gt;createBookmarkForWholePDF --- Flag for setting a bookmark to the
  to-be-included pdf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the script
&lt;code&gt;python createBookmarkIncludePdf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The script creates in the folder where the to-be-included-pdf resides two
  files:&lt;ul&gt;
&lt;li&gt;filename_Pdfannot.txt --- Annotations as given by the pdftk software&lt;/li&gt;
&lt;li&gt;filename_TexCommands.tex --- Tex commands that is to be included into the
  parent tex file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="who-do-i-talk-to"&gt;Who do I talk to?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Abraham Vinod (aby[dot]vinod[at]gmail[dot]com)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Latex"></category><category term="Python"></category></entry><entry><title>Tips for learning online</title><link href="/MOOCtips.html" rel="alternate"></link><published>2017-01-15T00:00:00-07:00</published><updated>2017-01-15T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-01-15:/MOOCtips.html</id><summary type="html">&lt;p&gt;Some tips I found useful for MOOC-based learning&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have used the internet to learn several new tools and concepts --- &lt;a href="http://online.stanford.edu/course/convex-optimization-winter-2014"&gt;convex
optimization&lt;/a&gt;,
&lt;a href="https://www.coursera.org/learn/machine-learning"&gt;machine learning&lt;/a&gt; to name a
few. More often than not, I like to keep download the videos and other materials
for future use. I want to mention a couple of tools I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/coursera-dl/coursera-dl"&gt;coursera-dl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rg3.github.io/youtube-dl/download.html"&gt;youtube-dl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.downthemall.net/"&gt;DownThemAll&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="MOOC"></category></entry><entry><title>Similarities between model predictive control and verification theory</title><link href="/MPCandVerification.html" rel="alternate"></link><published>2017-01-09T00:00:00-07:00</published><updated>2017-01-09T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-01-09:/MPCandVerification.html</id><summary type="html">&lt;p&gt;Surprising overlap between two subfields of control theory&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my major research projects is on verification of dynamical systems.
Specifically, I am interested in characterizing the set of initial conditions
for a given dynamical system which can be driven such that the state reaches a
    certain target subset of the state space while avoiding certain unsafe
    subsets of the state space --- the reach-avoid objective. Needless to say,
    solving this problem manifests in a lot of real-world challenges where a
    certificate of task completion and/or safety is required.&lt;/p&gt;
&lt;p&gt;As always, I thought (wrongly) this field was insular in the sense that it is a
unique problem worked on only by my peers.&lt;/p&gt;
&lt;p&gt;The other day, I was reading an Automatica paper&lt;sup id="fnref-GoulartAutomatica2006"&gt;&lt;a class="footnote-ref" href="#fn-GoulartAutomatica2006"&gt;1&lt;/a&gt;&lt;/sup&gt;. This well-written paper in the robust MPC literature
discusses optimal control problems on linear systems with disturbance with a
reach-avoid like objective (Polytopic target and safe sets).
&lt;!--- Some interesting results (at least I was not aware of it):
+ Two parameterizations of the control policies discussed--- Affine state-feedback parameterization (ASFP) and affine disturbance feedback parameterization (ADFP)
+ ASFP is desired, but the resulting optimal control formulation is generally nonconvex
+ ADFP is equivalent to ASFP and the resulting optimal control formulation is actually convex (and tractable).
+ Guarantees of constraint satisfaction for MPC based on open loop control in a receding time horizon requires invariance conditions on the terminal set --- Assumption 1 in the paper.
--&gt;&lt;/p&gt;
&lt;p&gt;On the other hand, a similar effort was done in the verification
side&lt;sup id="fnref-verificationBlogPost"&gt;&lt;a class="footnote-ref" href="#fn-verificationBlogPost"&gt;3&lt;/a&gt;&lt;/sup&gt; which proposed a time-dependent differential game
setup to answer the question of reach-avoid objective&lt;sup id="fnref-MitchellTAC2005"&gt;&lt;a class="footnote-ref" href="#fn-MitchellTAC2005"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It is interesting to see totally different takes on essentially the same
problem.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-GoulartAutomatica2006"&gt;
&lt;p&gt;&lt;a href="http://www.sciencedirect.com/science/article/pii/S0005109806000021"&gt;Automatica 2006, Goulart et. al
&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-GoulartAutomatica2006" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-MitchellTAC2005"&gt;
&lt;p&gt;&lt;a href="http://ieeexplore.ieee.org/document/1463302/"&gt;Transactions on Automatic Control 2005, Mitchell et. al&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-MitchellTAC2005" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-verificationBlogPost"&gt;
&lt;p&gt;My familiarity is on &lt;a href="/verificationWhat.html"&gt;verification from control theory
point of view&lt;/a&gt;.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-verificationBlogPost" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Verification"></category><category term="Model Predictive Control"></category></entry><entry><title>What is verification?</title><link href="/verificationWhat.html" rel="alternate"></link><published>2017-01-08T00:00:00-07:00</published><updated>2017-01-08T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2017-01-08:/verificationWhat.html</id><summary type="html">&lt;p&gt;Discussing the two viewpoints in verification --- the computer science viewpoint and the controls viewpoint&lt;/p&gt;</summary><content type="html">&lt;h1 id="verification"&gt;Verification&lt;/h1&gt;
&lt;p&gt;Formal verification is the process of mathematically checking that the behavior
of a system, described using a formal model, satisfies a given property, also
described using a formal model. The two models may or may not be the same, but
must share a common semantic interpretation. The ability to carry out formal
verification is strongly affected by the model of computation, which determines
decidability and complexity bounds&lt;sup id="fnref-EdwardIEEE1997"&gt;&lt;a class="footnote-ref" href="#fn-EdwardIEEE1997"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Loosely, verification is meant to provide guarantees of safety (nothing bad will
happen), liveness (task completion --- eventually something good will happen)
for safety critical systems and other systems that need guarantees of their
    proper operations. These are generally embedded systems which have
    components that evolve continuously in time and discrete in time. Therefore,
    researchers generally use hybrid dynamical systems framework to model the
    system. &lt;/p&gt;
&lt;p&gt;Historically, there has been two approaches in dealing with the problem of
verification.&lt;/p&gt;
&lt;h2 id="control-theory-point-of-view"&gt;Control theory point of view&lt;/h2&gt;
&lt;p&gt;Verification is posed as a reach avoid problem where the objective is to identify
the initial conditions and the corresponding control policies under which the
hybrid system will hit a target set while avoiding an unsafe set over a finite
time horizon. The problem also depends on whether the hybrid system is
stochastic/deterministic and continuous-/discrete-time system. For discrete-time
stochastic hybrid systems&lt;sup id="fnref-myInterest"&gt;&lt;a class="footnote-ref" href="#fn-myInterest"&gt;3&lt;/a&gt;&lt;/sup&gt;, the control policies try to maximize the probability
of achieving the reach avoid objective&lt;sup id="fnref-SummersAutomatica2010"&gt;&lt;a class="footnote-ref" href="#fn-SummersAutomatica2010"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;For stochastic hybrid
systems, the problem is posed as a Markov decision process and use dynamic
programming to identify the initial conditions and the optimal control policies.
However, due to the curse of dimensionality, the application of verification is
mostly limited to low dimensional systems. Active research is being done on
developing approximations and exact methods to do verification of
high-dimensional systems.&lt;/p&gt;
&lt;h2 id="computer-science-point-of-view"&gt;Computer science point of view&lt;/h2&gt;
&lt;p&gt;Disclaimer: I have only seen the research from this point of view from the
sidelines. In other words, I am no expert on this point of view. I would like to
acknowledge Sumanth's contributions for helping improve this section. &lt;/p&gt;
&lt;p&gt;For hybrid systems, it is not straightforward to apply traditional formal
methods for verification, such as model checking&lt;sup id="fnref-ClarkeBook1999"&gt;&lt;a class="footnote-ref" href="#fn-ClarkeBook1999"&gt;4&lt;/a&gt;&lt;/sup&gt; and deductive
verification&lt;sup id="fnref-KaufmannBook2000"&gt;&lt;a class="footnote-ref" href="#fn-KaufmannBook2000"&gt;5&lt;/a&gt;&lt;/sup&gt;, to hybrid systems since these methods were
originally developed for circuits and communication protocols
and usually require an extensive search of all reachable states.  However, this is
not possible as the states in hybrid systems are uncountable&lt;sup id="fnref-LinBook2000"&gt;&lt;a class="footnote-ref" href="#fn-LinBook2000"&gt;6&lt;/a&gt;&lt;/sup&gt;. An
approach used in this camp tackle the problem by modeling the hybrid system as a
finite state automation using abstraction techniques. Other approaches include
using SMT solvers and probabilistic model checkers&lt;sup id="fnref-Caution"&gt;&lt;a class="footnote-ref" href="#fn-Caution"&gt;7&lt;/a&gt;&lt;/sup&gt;. Do check out these
interesting links ---
&lt;a href="http://cs.stackexchange.com/questions/14946/distinguish-decision-procedure-vs-smt-solver-vs-theorem-prover-vs-constraint-sol"&gt;Distinguishing Decision Procedure vs SMT solver vs Theorem prover vs Constraint
solver&lt;/a&gt;
and &lt;a href="http://dreal.github.io/dReach/"&gt;dReach&lt;/a&gt;. Some good books on these topics
are &lt;a href="http://www.springer.com/us/book/9783540002963"&gt;Klaus Schneider's Verification of reactive
systems&lt;/a&gt;, &lt;a href="https://www.amazon.com/Design-Validation-Computer-Protocols-Holzmann/dp/0135399254"&gt;Gerard J. Holzmann's
Design And Validation Of Computer
Protocols&lt;/a&gt;,
and &lt;a href="http://cs.nyu.edu/cs/faculty/pnueli/books.html"&gt;Amir Pneuli's books&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="conclusion_1"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Irrespective of the approach, the goal of these two research camps are the same
--- provide concrete proof that our intuition-based designs/heuristics will
actually be safe.&lt;/p&gt;
&lt;!--
[^MitchellLvlSet]: [https://www.cs.ubc.ca/~mitchell/ToolboxLS/](https://www.cs.ubc.ca/~mitchell/ToolboxLS/)
For deterministic continuous-time systems, the reach-avoid problem can solved
using Level set toolbox methods[^MitchellLvlSet]. --&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-EdwardIEEE1997"&gt;
&lt;p&gt;&lt;a href="ieeexplore.ieee.org/document/558710"&gt;Proceedings of IEEE 1997, Edward et.  al&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-EdwardIEEE1997" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-SummersAutomatica2010"&gt;
&lt;p&gt;&lt;a href="http://linkinghub.elsevier.com/retrieve/pii/S0005109810003547"&gt;Automatica 2010, Summers et.
al&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-SummersAutomatica2010" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-myInterest"&gt;
&lt;p&gt;This is the type of systems I work with.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-myInterest" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-ClarkeBook1999"&gt;
&lt;p&gt;&lt;a href="dl.acm.org/citation.cfm?id=332656"&gt;Model checking by Clarke et. al, 1999&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-ClarkeBook1999" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-KaufmannBook2000"&gt;
&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=555902"&gt;Computer Aided Reasoning: An Approach by Kaufmann et.  al.&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-KaufmannBook2000" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-LinBook2000"&gt;
&lt;p&gt;&lt;a href="www.nowpublishers.com/article/Details/SYS-001"&gt;Hybrid Dynamical Systems: An Introduction to Control and Verification, Lin et.  al&lt;/a&gt;&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-LinBook2000" title="Jump back to footnote 6 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-Caution"&gt;
&lt;p&gt;At this point, I am really out of my depth. &amp;nbsp;&lt;a class="footnote-backref" href="#fnref-Caution" title="Jump back to footnote 7 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Verification"></category></entry><entry><title>Blogging using Pelican + Conda + GitHub Pages</title><link href="/setMeup.html" rel="alternate"></link><published>2016-12-23T03:42:00-07:00</published><updated>2016-12-23T03:42:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2016-12-23:/setMeup.html</id><summary type="html">&lt;p&gt;All the tweaks I did to get my Pelican blog running.&lt;/p&gt;</summary><content type="html">&lt;h1 id="prelude"&gt;Prelude&lt;/h1&gt;
&lt;p&gt;I have been postponing my foray into blogging for some time now. Well, this
holiday season I decided to present myself with the gift of blogging. I had done
a bit of blogging using &lt;a href="https://www.dokuwiki.org/"&gt;DokuWiki&lt;/a&gt; back when I was at
IIT Madras, but my site was hacked due to my negligence of the security settings.
To make things simple, I am choosing a static website for blogging this time. I will
stick with &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; due to my comfort level with
Python. &lt;/p&gt;
&lt;p&gt;On reading about Pelican, I discovered that the norm appears to be to replace the customary
"Hello World" post with a post on how one sets up the blog using Pelican.
The journey of understanding Pelican definitely is not straight-forward as one would like to hope for.
However, among the numerous posts, I read on the internet, I would like to
especially thank the "Hello World" posts from Mr. Hartley's
&lt;a href="http://beneathdata.com/how-to/how-i-built-this-website"&gt;blog&lt;/a&gt;, Mr. Vincent's
&lt;a href="http://algorithmshop.com/20131212-starting-a-blog.html/"&gt;blog&lt;/a&gt;, and Mr.
Jerome's &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="how-did-i-get-my-blog-setup"&gt;How did I get my blog setup?&lt;/h1&gt;
&lt;h2 id="setting-up-conda-and-pelican-in-windows"&gt;Setting up Conda and Pelican in Windows&lt;/h2&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://git-for-windows.github.io/"&gt;msysgit&lt;/a&gt;&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt; to emulate the Unix terminal on my PC. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/conda/conda"&gt;conda&lt;/a&gt; for easy python package handling&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following steps create a virtual environment in conda for Pelican,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda create -n blog &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.5       &lt;span class="c1"&gt;# Creates a conda environment blog with Python 3.5&lt;/span&gt;
$ conda install markdown                &lt;span class="c1"&gt;# Install markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or download the following environment file &lt;a href="stuff/blog.yml"&gt;blog&lt;/a&gt;, and do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda env create -f blog.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that pelican-quickstart of pelican (available through the conda-forge
&lt;a href="https://anaconda.org/conda-forge/pelican"&gt;channel&lt;/a&gt;) does not work. It does
compile an existing pelican blog without any problems. &lt;/p&gt;
&lt;p&gt;To solve this, I fork the bleeding edge (at the time of writing, Pelican
3.7.0.dev0) of Pelican instead.  Unzip the &lt;a href="https://github.com/getpelican/pelican/archive/master.zip"&gt;git
repository&lt;/a&gt; into a
directory of your choice, say &lt;code&gt;PelicanBase&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; activate blog                  &lt;span class="c1"&gt;# Activate the conda environment&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; PelicanBase
$ python setup.py install               &lt;span class="c1"&gt;# Install pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installs pelican and fab.&lt;/p&gt;
&lt;h2 id="setting-up-the-blog"&gt;Setting up the blog&lt;/h2&gt;
&lt;p&gt;At this point, we are now ready to start laying the foundation for the blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir path/to/blog
$ &lt;span class="nb"&gt;cd&lt;/span&gt; path/to/blog
$ pelican-quickstart                    
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- 
# Should have worked but will fail
You will have to replace the == in the line number given in the error message
with &gt;=. See [this
conversation](https://github.com/getpelican/pelican/issues/2043#issuecomment-268625132)
for more details. 
--&gt;
&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt; will pose a series of questions that initializes
your blog.&lt;/p&gt;
&lt;h2 id="creating-the-first-post"&gt;Creating the first post&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;firstPost.md&lt;/code&gt; containing a title and date&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir content
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Title: Test content&lt;/span&gt;
&lt;span class="s1"&gt;&amp;gt; Date: 2016'&lt;/span&gt; &amp;gt; content/firstPost.md      &lt;span class="c1"&gt;# '&amp;gt;' is autogenerated when ENTER is pressed.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="rendering-the-blog"&gt;Rendering the blog&lt;/h2&gt;
&lt;p&gt;Fabric is a great tool that works with Pelican to automate publishing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab build                             &lt;span class="c1"&gt;# Builds the blog&lt;/span&gt;
$ fab serve                             &lt;span class="c1"&gt;# Serves the blog at localhost:8000 while holding up the terminal&lt;/span&gt;
$ fab regenerate &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; fab serve &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;          &lt;span class="c1"&gt;# Serves the blog at localhost:8000 while freeing the terminal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use the third command to work with my blog while typing. The automation
renders the new blog when the webpage is refreshed. To further automate the
refreshing (preview style), you can look into plugins for your favorite
browser. In Firefox, AutoReload is a good add-on.&lt;/p&gt;
&lt;h2 id="updating-github-pages"&gt;Updating github pages&lt;/h2&gt;
&lt;p&gt;I have used the approach highlighted in &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;this Hello World
post&lt;/a&gt;.
To summarize &lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican/"&gt;that
post&lt;/a&gt;,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ensure that you are on the 'source' branch (Create a new one using &lt;code&gt;git
checkout -b source&lt;/code&gt; if you haven't already)&lt;/li&gt;
&lt;li&gt;Add/commit everything except the &lt;code&gt;output&lt;/code&gt; folder &lt;/li&gt;
&lt;li&gt;Create a new branch 'gh-pages'&lt;/li&gt;
&lt;li&gt;Run the following bash script to automate the &lt;em&gt;update of GitHub pages&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I had to also follow the advice given
&lt;a href="https://github.com/getnikola/nikola/issues/2223#issuecomment-174193643"&gt;here&lt;/a&gt;
to install ghp-import via &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade git+https://github.com/ionelmc/python-ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;as opposed to the standard Conda installation. &lt;/p&gt;
&lt;p&gt;Once ghp-import is properly installed, I use the following script to &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;commitMSG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$commitMSG&lt;/span&gt;
fab build
git commit -am &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$commitMSG&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
ghp-import output
git checkout master
git merge gh-pages -m &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$commitMSG&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
git pull
git push -u --all
git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Future updates at Github with the local copy is now easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; bp &lt;span class="s2"&gt;"Commit Message"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id="other-tweaks_1"&gt;Other tweaks&lt;/h1&gt;
&lt;h2 id="adding-rss"&gt;Adding RSS&lt;/h2&gt;
&lt;p&gt;Include in your &lt;code&gt;pelicanconf.py&lt;/code&gt;, the following lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Feed generation&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/all.rss'&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="c1"&gt;#'feeds/%s.atom.xml'&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="ignoring-drafts"&gt;Ignoring drafts&lt;/h2&gt;
&lt;p&gt;Include in your &lt;code&gt;pelicanconf.py&lt;/code&gt;, the following lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Private sandbox&lt;/span&gt;
&lt;span class="n"&gt;IGNORE_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'0PRIVATE*'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Pelican does not generate html pages for md files starting with 0Private&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another
&lt;a href="http://www.stevenmaude.co.uk/posts/hiding-draft-articles-in-pelican"&gt;option&lt;/a&gt;is
to use &lt;code&gt;Status: draft&lt;/code&gt; in the markdown article header to ask Pelican to put the
generated htmls in a separate folder &lt;code&gt;drafts/&lt;/code&gt;. Remember to add this to
&lt;code&gt;.gitignore&lt;/code&gt; of the master branch to ensure it doesn't get pushed to the
outside world.&lt;/p&gt;
&lt;h2 id="site-logo-and-favicon"&gt;Site logo and favicon&lt;/h2&gt;
&lt;p&gt;Include in your &lt;code&gt;pelicanconf.py&lt;/code&gt;, the following lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITELOGO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'images/SITELOGO'&lt;/span&gt; 
&lt;span class="n"&gt;SITELOGO_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'images/FAVICON'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For my blog, I am using &lt;a href="http://fontawesome.io"&gt;Font Awesome's&lt;/a&gt; sticky note
icon as my site logo. The favicon was generated using
&lt;a href="http://paulferrett.com/fontawesome-favicon/"&gt;http://paulferrett.com/fontawesome-favicon/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="pelican-bootstrap3"&gt;Pelican-Bootstrap3&lt;/h2&gt;
&lt;p&gt;Clone &lt;code&gt;pelican-bootstrap3&lt;/code&gt; into the root folder of the blog. I hid the sidebar
and have an &lt;code&gt;About Me&lt;/code&gt; page in &lt;code&gt;content/pages&lt;/code&gt;. Blog posts in  &lt;code&gt;content/pages&lt;/code&gt;
are not archived and are treated as "static pages".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;####################### Theme-Specific Settings #########################&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pelican-bootstrap3'&lt;/span&gt;

&lt;span class="c1"&gt;# Pelican Theme-Specific Variables&lt;/span&gt;
&lt;span class="n"&gt;BOOTSTRAP_THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'cosmo'&lt;/span&gt;
&lt;span class="n"&gt;PYGMENTS_STYLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'monokai'&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;DISPLAY_ARTICLE_INFO_ON_INDEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;SHOW_ARTICLE_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;HIDE_SIDEBAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_TAGS_ON_SIDEBAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_RECENT_POSTS_ON_SIDEBAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="c1"&gt;# Below commands will generate SITEURL/tags.html which will have the list of tags&lt;/span&gt;
&lt;span class="n"&gt;TAG_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'tags/{slug}.html'&lt;/span&gt;
&lt;span class="n"&gt;TAGS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'tags.html'&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'categories.html'&lt;/span&gt;
&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'tags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'categories'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'archives'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!---
#ABOUT_ME = "blah blah blah"
#AVATAR = "/images/myphoto.png"
#BANNER = "/images/banner.png"
---&gt;
&lt;h3 id="reducing-the-figure-size"&gt;Reducing the figure size&lt;/h3&gt;
&lt;h4 id="option-1-not-preferred-but-requires-less-editing-with-existing-images"&gt;Option 1 (Not preferred; but requires less editing with existing images)&lt;/h4&gt;
&lt;p&gt;Edit the &lt;code&gt;.entry-content img&lt;/code&gt; in &lt;code&gt;pelican-bootstrap3/static/css/style.css&lt;/code&gt; to
have a &lt;code&gt;max-width&lt;/code&gt; of 80%. 
&lt;!--This ensures my MATLAB generated files are not
displayed very big (See &lt;a href="/hscc2017.html"&gt;this blog post&lt;/a&gt;).--&gt;&lt;/p&gt;
&lt;h4 id="option-2-preferred"&gt;Option 2 (Preferred)&lt;/h4&gt;
&lt;p&gt;Include images using the following HTML code directly into your Markdown file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!--For an empty div to left for centering--&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"padding-left: 0px;  padding-right: 0px;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ALT text."&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/image"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"img-responsive"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="custom-header-bar_1"&gt;Custom header bar&lt;/h3&gt;
&lt;p&gt;Add the following block within the if loop but just above the code 
&lt;code&gt;{% for cat, null in categories %}&lt;/code&gt; in &lt;code&gt;pelican-bootstrap3/templates/base.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- Addition of My research tag into the header--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ SITEURL }}/tags/my-research.html"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;
            &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-flask fa-lg"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; My Research&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;About Me&lt;/code&gt; page, tags list, categories list, and RSS feed were also added to the custom header.&lt;/p&gt;
&lt;h3 id="custom-icons-in-social"&gt;Custom icons in social&lt;/h3&gt;
&lt;p&gt;Check for the unicode of the desired icon in
&lt;a href="http://fontawesome.io"&gt;http://fontawesome.io&lt;/a&gt;. If you would like to add this
icon to your social link XYZ ABC, then add to
&lt;code&gt;pelican-bootstrap3\static\css\font-awesome.min.css&lt;/code&gt; the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;.fa-xyz-abc-square:&lt;/span&gt;&lt;span class="nf"&gt;before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="no"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="no"&gt;UNICODE_COMES_HERE&lt;/span&gt;&lt;span class="err"&gt;";&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also have used &lt;a href="http://jpswalsh.github.io/academicons/"&gt;Academicons&lt;/a&gt; in my
&lt;code&gt;About Me&lt;/code&gt; page. Note that you will have to add the font files and the css files
to the bootstrap files. Also, call the css file in the &lt;code&gt;pelican-bootstrap3/templates/base.html&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="comment-message"&gt;Comment message&lt;/h3&gt;
&lt;p&gt;See &lt;a href="/comments_in_blog.html"&gt;this blog post&lt;/a&gt; to know how and why I have
implemented this approach to obtaining comments on this blog.&lt;/p&gt;
&lt;h2 id="math-support_1"&gt;Math support&lt;/h2&gt;
&lt;p&gt;I could not get the &lt;code&gt;render_math&lt;/code&gt; plugin to work. I just incorporated MathJax
into the &lt;code&gt;pelican-bootstrap3\templates\base.html&lt;/code&gt; of my template based on the &lt;a href="http://docs.mathjax.org/en/latest/start.html#tex-and-latex-input"&gt;MathJax
documentation&lt;/a&gt;.
Insert the following snippet before the &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag in &lt;code&gt;base.html&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/x-mathjax-config"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;MathJax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;tex2jax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inlineMath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'$'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'\\('&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'\\)'&lt;/span&gt;&lt;span class="p"&gt;]]}});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce beautiful math like $x^2$ and $$A_B.$$ &lt;/p&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pelican-plugins'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pelican-toc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;TOC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'TOC_HEADERS'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'^h[1-6]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# What headers should be included in the generated toc&lt;/span&gt;
                                &lt;span class="c1"&gt;# Expected format is a regular expression&lt;/span&gt;

    &lt;span class="s1"&gt;'TOC_RUN'&lt;/span&gt;     &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;      &lt;span class="c1"&gt;# Default value for toc generation, if it does not evaluate&lt;/span&gt;
                                &lt;span class="c1"&gt;# to 'true' no toc will be generated&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- #MD_EXTENSIONS = ['toc', 'fenced_code', 'codehilite(css_class=highlight)',
'extra'] --&gt;
&lt;h3 id="table-of-contents"&gt;Table of contents&lt;/h3&gt;
&lt;p&gt;Insert this block in &lt;code&gt;pelican-bootstrap3\templates\base.html&lt;/code&gt; just above the
&lt;code&gt;{{article.content}}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toc&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"border-style: solid;background:lightgrey"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text-align:center"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nav&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"toc"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toc&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="changing-footer_1"&gt;Changing footer&lt;/h2&gt;
&lt;p&gt;Based on this
&lt;a href="http://mygeekdaddy.net/2015/01/09/never-change-your-pelican-footer-again/"&gt;article&lt;/a&gt;,
I updated &lt;code&gt;blog/pelican-bootstrap3/templates/includes/footer.html&lt;/code&gt; with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         {% if articles %}
            {% set copy_date = articles[0].date.strftime('%Y') %}
         {% else %}
            {% set copy_date = '' %}
         {% endif %}
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-xs-10"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; {{ copy_date }} {{ AUTHOR }}
            &lt;span class="ni"&gt;&amp;amp;middot;&lt;/span&gt; Powered by &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://docs.getpelican.com/"&lt;/span&gt;
                &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pelican&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and other  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://abyvinod.github.io/setting-up-this-blog-using-the-pelicancondagithub-pages.html"&lt;/span&gt;
                &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;goodies&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;.
         &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"col-xs-2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"pull-right"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-arrow-up"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Back to top&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;$ sign denotes bash prompt.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;Title and date are the minimum requirement for a blog post.&amp;nbsp;&lt;a class="footnote-backref" href="#fnref-2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/hr&gt;&lt;/div&gt;</content><category term="Pelican"></category><category term="Python"></category></entry><entry><title>General tips regarding Pelican</title><link href="/syntax.html" rel="alternate"></link><published>2016-12-23T00:00:00-07:00</published><updated>2016-12-23T00:00:00-07:00</updated><author><name>Abraham Vinod</name></author><id>tag:None,2016-12-23:/syntax.html</id><summary type="html">&lt;p&gt;Notes on the margin for using Pelican.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Markdown syntax can be found at 
  &lt;a href="https://sourceforge.net/p/pelican-edt/wiki/markdown_syntax/#md_ex_lists"&gt;SourceForge&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Commenting:&lt;ul&gt;
&lt;li&gt;Use the standard HTML comments &lt;code&gt;&amp;lt;!-- COMMENT_GOES_HERE --&amp;gt;&lt;/code&gt;. (See this &lt;a href="http://stackoverflow.com/a/4829998/1846549"&gt;SO answer&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;{# COMMENT_GOES_HERE #}&lt;/code&gt; for commenting lines inside the template.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code highlighting for a particular language can be done by writing the
  language name after the code block command. The first block was created by
  encapsulating the code you see in ``` instead of ~~~.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~~~python
# Feed generation
~~~
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;generates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Feed generation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Links:&lt;ul&gt;
&lt;li&gt;For internal linking, use &lt;code&gt;[specifically]({filename}4 - Verification.md)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create HTML tags for navigation within a file as &lt;code&gt;&amp;lt;a
  name="NAME_YOUR_TAG"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;, and then navigate to it via this markdown
  code snippet &lt;code&gt;[GO_THERE](#NAME_YOUR_TAG)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists:&lt;ul&gt;
&lt;li&gt;Skip a line&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;1.&lt;/code&gt; for numbered&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; for bulleted lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;grep -rnw '/path/to/somewhere/' -e "pattern"&lt;/code&gt; to identify any trouble
  some components inside the template.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Pelican"></category></entry></feed>