[{"authors":null,"categories":null,"content":"I am a researcher with experience in control, optimization, and reinforcement learning. My research goal is to develop safe autonomy under uncertainty and constraints using minimal computational effort. Safe autonomy can have wide impact ranging from bio-medical devices and transportation to space applications.\nCurrently, I am a Postdoctoral Research Fellow, working with Dr. Ufuk Topcu at the University of Texas at Austin. I received my PhD in Engineering (Systems and Control) at the University of New Mexico, with Dr. Meeko Oishi as my PhD advisor. My PhD work focused on theory and scalable algorithms for probabilistic safety and stochastic optimal control design under constraints. Along with J. Gleason, I have implemented a significant part of my PhD work in SReachTools, which is an open-source, repeatability-tested, MATLAB toolbox. I obtained my B.Tech. and M.Tech degrees in Electrical Engineering from the Indian Institute of Technology, Madras.\nMy research has received various recognitions:\n Best Student Paper Award in the 2017 ACM Hybrid Systems: Computation and Control Conference, Best Paper Award finalist in the 2018 ACM Hybrid Systems: Computation and Control Conference, and Prof. Achim Bopp Prize for my M. Tech thesis.  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556198477,"objectID":"69c363023bddcb07b4ac372af7001b01","permalink":"https://abyvinod.github.io/author/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/admin/","section":"author","summary":"I am a researcher with experience in control, optimization, and reinforcement learning. My research goal is to develop safe autonomy under uncertainty and constraints using minimal computational effort. Safe autonomy can have wide impact ranging from bio-medical devices and transportation to space applications.\nCurrently, I am a Postdoctoral Research Fellow, working with Dr. Ufuk Topcu at the University of Texas at Austin. I received my PhD in Engineering (Systems and Control) at the University of New Mexico, with Dr.","tags":null,"title":"Abraham P. Vinod","type":"author"},{"authors":null,"categories":null,"content":"In the interest of repeatable coding, I will strive to share Jupyter notebooks for Python code used in this blog, as well as the Conda environment file to generate the environment.\nI will assume that you have installed conda in your machine. See the installation instructions here.\n Download the environment file and the jupyter notebook. Recreate the conda environment I used in your machine:\n $ conda env create -f myenv.yml  This environment has jupyter installed.\n Run the jupyter notebook:\n$ jupyter notebook  Run the notebook using the menu options.\n Obtain the html page included in the webpages using the command\n$ jupyter nbconvert notebook.ipynb   ","date":1555989808,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567700153,"objectID":"68376f46c136619a779fef9a78d2b35c","permalink":"https://abyvinod.github.io/post/repeatability-jupyter/","publishdate":"2019-04-22T22:23:28-05:00","relpermalink":"/post/repeatability-jupyter/","section":"post","summary":"Repeatability instructions for codes distributed in this blog","tags":null,"title":"Repeatability using Jupyter notebook and Conda","type":"post"},{"authors":[],"categories":null,"content":"This Jupyter notebook-based blog post can be setup in your local machine as follows (see this post for repeatability instructions):\n Jupyter notebook (Use right click and \u0026lsquo;Save Link as\u0026rsquo;) Conda environment file  It uses the problem of placing a fixed number of round smaller circles in a large circle as a nonlinear (non-convex) optimization problem. It was through setting up and solving the resulting difference of convex optimization problem using CVXPY.\n ","date":1555890396,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555991316,"objectID":"dcff742a2b68828e3e4d32d4a28ad39c","permalink":"https://abyvinod.github.io/post/dcvx/","publishdate":"2019-04-21T18:46:36-05:00","relpermalink":"/post/dcvx/","section":"post","summary":"We discuss the use of difference of convex programming to perform nonlinear non-convex optimization","tags":null,"title":"A gentle tutorial to the difference of convex optimization","type":"post"},{"authors":null,"categories":null,"content":" Automation, typically, refers to the use of an onboard computer to drives a system to optimize some objective. It makes our day-to-day life simpler and efficient, for example, in transportation (autopilot systems and self-driving cars), space applications, biomedical applications, power grid, and the list goes on and on. However, as we hand over more and more control to the automation, we naturally seek guarantees of safety and performance. After all, we do not want to spend billions of dollar in R\u0026amp;D and develop an automation that may cause harm.\nTable of Contents Why is providing safety guarantees in automated control systems for real-world problems hard? In control theory, we attack real-world problems by formulating a mathematical model and studying its relevant properties. The two key challenges in providing the desired safety guarantees for real-world systems are stochasticity and high-dimensionality.\nStochasticity in our models help us capture human inputs (like actions of the other drivers on the street for the self-driving car problem), disturbance effects (like weather in air navigation/power grid systems), varying parameters (like patient parameters in biomedical devices), and other unmodelled phenomena. For example, we can describe the error between our simplified model and the more complicated true mathematical model via a stochastic error term.\nHigh-dimensional systems evolve as a function of a larger set of states, and thereby allowing the mathematical model to be closer to the reality compared to their low-dimensional models.\nHow do we formally obtain a safety guarantee? Terminal stochastic reach-avoid problem The following information is required:\n the stochastic system dynamics along with the bounded control space, the safe set, and the target set.  We wish to satisfy the following specification:\n Ensure that the system reaches the target set at a finite time horizon (not before). (Reach constraint) Ensure that the system stays within the safe set during the time interval. (Safety constraint)  We seek to address the following verification problem[^2]:\nIdentify the set of initial states and design an admissible controller that maximizes the probability of satisfaction of a specification.\nSuch a specification is called a terminal hitting-time stochastic reach-avoid problem. It is a special class of verification problems, which has been well studied for the past couple of decades in computer science as well as control theory. See this paper by Sean Summers and John Lygeros for more details.\n Given the initial state, we need to pick $\\pi^*$ opposed to $\\pi_2$. Here, growing triangles denote the uncertain trajectories under the application of a control policy $\\pi^\\ast$ and $\\pi_2$, $\\mathcal{X}$ refers to the state space, $\\mathcal{S}\\subseteq \\mathcal{X}$ refers to the safe set, and $\\mathcal{T}\\subseteq \\mathcal{X}$ refers to the target set.   Stochastic reachability of a target tube: A general framework for safety This problem can be generalized to a time-varying collection of safe sets. Motivated by the classical work of Bertsekas, we call this problem the stochastic reachability of a target tube. This problem is illustrated in Figure 2.\n Design controllers that maximize the probability of staying within the target tube {$\\mathcal{T}_i$}, and characterize the set of initial states $\\mathscr{L}_{\\mathrm{SR}}(â‹…)$ that satisfy a minimum reach probability. Image licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.   See my paper on stochastic reachability of a target tube for more details.\nSReachTools SReachTools is a user-friendly, open-sourced MATLAB toolbox that address these questions.\nApplications See the following posts for safety guarantees obtained for various applications:\n Spacecraft rendezvous and docking problem Automated anesthesia delivery system Building automation system  ","date":1554350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554399427,"objectID":"9326f888416b4881fef68d426c127c13","permalink":"https://abyvinod.github.io/project/stochreach/","publishdate":"2019-04-04T00:00:00-04:00","relpermalink":"/project/stochreach/","section":"project","summary":"Providing guarantees of safety and synthesis of admissible controllers for stochastic dynamical systems using optimization, Fourier transforms, and computational geometry","tags":["stochastic-optimal-control","stochastic-reachability"],"title":"Safety under uncertainty and constraints","type":"project"},{"authors":null,"categories":null,"content":"SReachTools is an open-source (GPLv3) stochastic reachability toolbox, written in MATLAB. SReachTools has been repeatability-evaluated at the Hybrid Systems: Computation and Control, 2019. It implements all the algorithms I developed as part of my PhD work. It was developed in collaboration with J. Gleason.\n Toolbox details  Project website https://sreachtools.github.io/ Code repository \u0026mdash; https://github.com/sreachtools/SReachTools  See this toolbox in action \u0026mdash; Spacecraft rendezvous problem, a stochastic reach-avoid problem where we wish to dock two spacecrafts safely My paper on stochastic reachability of a target tube summarizes the theoretical properties and (some of the) computational algorithms used. A project post detailing this mathematical framework for generating probabilistic guarantees of safety and performance.    Given a stochastic dynamical system, design controllers that maximize the probability of staying within the target tube {$\\mathcal{T}_i$}, and characterize the set of initial states $\\mathscr{L}_{\\mathrm{SR}}(â‹…)$ that satisfy a minimum reach probability. Image licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.   For safety-critical applications, it is important that we construct either exact or underapproximations of the set of safe initial states. We do not want to be over-confident in our safety declarations, i.e., declare an initial state safe when it is not really safe.\nSReachTools utilizes convex optimization, stochastic optimization, Fourier transforms, and computational geometry to construct underapproximations of the set of safe initial states and controllers that satisfy hard control bounds. Further, by being grid-free, SReachTools does not directly suffer from the curse of dimensionality that plagues the state-of-the-art dynamic programming-based solutions.\n","date":1554350400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556199722,"objectID":"c14a6f03f5069f725ee333ca708fbfe0","permalink":"https://abyvinod.github.io/post/sreachtools/","publishdate":"2019-04-04T00:00:00-04:00","relpermalink":"/post/sreachtools/","section":"post","summary":"A repeatability-tested, open-source, MATLAB toolbox for scalable stochastic reachability computation for stochastic linear systems","tags":["stochastic-optimal-control"],"title":"SReachTools: A MATLAB Toolbox for stochastic reachability computation","type":"post"},{"authors":null,"categories":null,"content":"The video below shows the example discussed in our CDC 2018 paper. The successive convexification-based planner computes these trajectories within $0.25$ seconds (sampling time). The obstacle motion prediction is done on-the-fly using my work on probabilistic occupancy function.\n The colored circles are obstacles that we must avoid. The obstacles have known stochastic dynamics. The figure on the right shows the $\\alpha$-probability occupied sets. The black dot is the current robot location. The blue asterisks show the planner\u0026rsquo;s intended future trajectory.  We apply the same code to an environment with more obstacles.   ","date":1553918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554399427,"objectID":"50758ea7f0a1fd1bd67e4aef911f5ba7","permalink":"https://abyvinod.github.io/post/stochmotion/","publishdate":"2019-03-30T00:00:00-04:00","relpermalink":"/post/stochmotion/","section":"post","summary":"A sampling-free estimation of collision probability and motion planning using successive convexification","tags":["stochastic-optimal-control"],"title":"Stochastic motion planning via probabilistic occupancy function","type":"post"},{"authors":null,"categories":null,"content":" Given a stochastic model for a (non-adversarial) threat quadrotor, we utilize forward stochastic reachability to construct trajectories with maximum probability of capture for a pursuer quadrotor.\nExperiment 1: Robustness to threat quadrotor  You may want to mute the YouTube video to avoid the sound of the quadrotors     Experiment 2: Open-loop control vs receding horizon control  You may want to mute the YouTube video to avoid the sound of the quadrotors     ","date":1553918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554399427,"objectID":"5b8a59d645b3434e0d9bdee642d00c9f","permalink":"https://abyvinod.github.io/post/stochtarget/","publishdate":"2019-03-30T00:00:00-04:00","relpermalink":"/post/stochtarget/","section":"post","summary":"A grid-free, recursion-free, and sampling-free estimation of events with convexity guarantees","tags":["stochastic-optimal-control"],"title":"Stochastic target capture via forward stochastic reachability","type":"post"},{"authors":null,"categories":null,"content":" High-level description We wish to drive a spacecraft (Deputy) towards another spacecraft (Chief) for docking. This problem is known as the spacecraft rendezvous and docking problem. It is a common requirement for maintenance and resupply missions in space applications. Due to sensing constraints, we wish that the Deputy stays within a line-of-sight cone with respect to Chief. Further, we wish to achieve the docking in a pre-specified time interval while obeying the physical laws that govern the system and constraints on actuation (limited thrust).\n Satellite rendezvous and docking problem   We model the Deputy satellite dynamics in the relative coordinate frame of the Chief. Loosely, we have the following constraints we wish to satisfy apart from the dynamics and control constraints,\n Reach constraint: Reaching a target set centered at the origin. This set can encode relative velocity constraints (should dock slowly) and tolerances in relative position at the time of rendezvous. Avoid constraint: We wish to stay within a safe set, given by a stationary cone (line-of-sight cone) with the tip at the origin.  Formal specification Drive the Deputy satellite such that it\n reaches the target set at a pre-specified time, stays within the safe set (staying out of the avoid set) during the time interval, satisfies the dynamics constraints, and satisfies the control constraints.  Safety problem Identify the set of initial states and synthesize an admissible controller that achieves the given specification with a probability above a pre-specified likelihood threshold. Such initial states will be declared safe.\n For safety-critical applications, it is important that we construct either exact or underapproximations of the set of safe initial states. We do not want to be over-confident in our safety declarations, i.e., declare an initial state safe when it is not really safe.   Results SReachTools can address this question, and generate underapproximations of the set of safe initial states.\n Various underapproximations of the set of initial locations with probability of satisfying the specification greater than 0.8. A Monte-Carlo simulation of the resulting trajectory from one of the safe initial states is also shown.   Figure 2 shows various underapproximations of the set of initial locations obtained using SReachTools. These are the safe initial states from which the Deputy can be driven to satisfy the specification with a likelihood no smaller than 0.8. A Monte-Carlo simulation of the safe trajectory is shown from one of the safe initial states under the synthesized controller. Out of 5 randomly chosen trajectories, only one fails (violates terminal velocity constraints).\n}} -- ","date":1552622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554399427,"objectID":"78f3f54d87bb8c65473636d300ad47e1","permalink":"https://abyvinod.github.io/post/spacecraft/","publishdate":"2019-03-15T00:00:00-04:00","relpermalink":"/post/spacecraft/","section":"post","summary":"Demonstration of stochastic reachability analysis","tags":["stochastic-optimal-control"],"title":"Spacecraft rendezvous problem","type":"post"},{"authors":null,"categories":null,"content":" Table of Contents HAHAHUGOSHORTCODE-TOC0-HBHB\nHigh-level description For reliable autonomy under uncertainty, we must have efficient ways to estimate event likelihood given a stochastic system model.\nExisting methods  Use sampling-based methods like Monte-Carlo simulation. Hoever, this approach only have asymptotic convergence guarantees. Compute the probability density via convolutions when the dynamics is linear. However, this iterative method requires gridding for numerical evalution of the convolution integral. Further, its accuracy degrades over long time horizons. Use concentration inequalities like moment-based bounds to obtain crude estimates of the event probability  Proposed solution Use Fourier transformation to obtain a grid-free, recursion-free, and sampling-free method to compute the probability density function. The event likelihood, which we call the probablistic occupancy function, can be computed via numerical integration. The $\\alpha$-super level sets of the probabilitistic occupancy functions, which we call the $\\alpha$-probability occupied sets, are precisely the set of states for which the event likelihood is above a pre-specified threshold.\nSee my paper on probabilistic occupancy via forward stochastic reachability for more details.\nApplications  Stochastic motion planning: Navigate a robot in an environment with obtacles that have geometric shapes and uncontrolled stochastic dynamics Stochastic target capture: Capture a stochastically moving target using a controller robot  ","date":1522382400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554399427,"objectID":"393b1e0e3a60329c6965d65295a2694c","permalink":"https://abyvinod.github.io/project/proboccup/","publishdate":"2018-03-30T00:00:00-04:00","relpermalink":"/project/proboccup/","section":"project","summary":"A grid-free, recursion-free, and sampling-free estimation of events with convexity guarantees","tags":["stochastic-optimal-control"],"title":"Probabilistic occupancy via forward stochastic reachability","type":"project"}]